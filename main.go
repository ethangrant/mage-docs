package main

import (
	"flag"
	"fmt"
	md "github.com/nao1215/markdown"
	"os"
)

type Config struct {
	ModulePath string
}

func main() {
	const markdownTitle = "Generated by Mage-docs"

	var (
		argValidator    ArgValidator
		interactiveForm InteractiveForm
		interactive     bool
		path            string
		outputFile      string
		generators      []MarkdownGenerator
	)

	flag.BoolVar(&interactive, "i", false, "Use tool in interactive mode.")
	flag.StringVar(&path, "module-path", "", "Path to the module location")
	flag.StringVar(&outputFile, "output-file", "MAGE_DOCS_README.md", "Name of the output file.")
	flag.Parse()

	if interactive {
		err := interactiveForm.Start(argValidator, &path, &outputFile)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
	}

	path = AddTrailingSlash(path)

	err := argValidator.ModulePath(path)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	cnf := Config{
		ModulePath: path,
	}

	file, err := os.Create(cnf.ModulePath + outputFile)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	defer file.Close()

	markdown := md.NewMarkdown(file).H1f("%s", md.BoldItalic(markdownTitle))

	generators = append(generators,
		new(Module),
		new(Routes),
		new(Webapi),
		new(Layouts),
		new(Mixins),
		new(Schemas),
		new(Dispatches),
		new(Observers),
		new(Plugins),
		new(Preferences),
	)

	for _, generator := range generators {
		generator.Generate(cnf, markdown)
	}

	err = markdown.Build()
	if err != nil {
		fmt.Println(err.Error())
		return
	}
}
