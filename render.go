package main

import (
	"os"

	md "github.com/nao1215/markdown"
)

type Renderer struct {
	DocTitle      string
	GeneratorsMap map[string]MarkdownGenerator
}

func NewRenderer() *Renderer {
	return &Renderer{
		DocTitle: "Generated by Mage-docs",
		GeneratorsMap: map[string]MarkdownGenerator{
			"Module":      new(Module),
			"Routes":      new(Routes),
			"Webapi":      new(Webapi),
			"Layouts":     new(Layouts),
			"Mixins":      new(Mixins),
			"Schemas":     new(Schemas),
			"Dispatches":  new(Dispatches),
			"Observers":   new(Observers),
			"Plugins":     new(Plugins),
			"Preferences": new(Preferences),
		},
	}
}

func (r *Renderer) Render(f *os.File, generators []string, cnf Config) error {
	var selected []MarkdownGenerator

	for _, name := range generators {
		val, ok := r.GeneratorsMap[name]
		if !ok {
			continue
		}

		selected = append(selected, val)
	}

	markdown := md.NewMarkdown(f).H1f("%s", md.BoldItalic(r.DocTitle))

	for _, generator := range selected {
		generator.Generate(cnf, markdown)
	}

	err := markdown.Build()
	if err != nil {
		return err
	}

	return nil
}
